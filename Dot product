////called dot_product which calculates in the variable ps, the dot(scalar) product of v1 and v2 (v1 and v2 are vectors of IR)

procedure dot_product(v1, v2, byRef ps)
    ps = 0
    for i = 0 to v1.length - 1
        for j = 0 to v2.length - 1
            if i == j
                ps = ps + (v1[i] * v2[j])
            end if
        end for
    end for
end procedure

/////Write an algorithm which determines, for n pairs of given vectors, whether two vectors of given IR are orthogonal, 
///by calling the procedure defined in the previous question. The dot product of two orthogonal vectors is zero.

procedure is_orthogonal(v1, v2, byRef ps)
    dot_product(v1, v2, ps)
    if ps == 0
        print("The vectors are orthogonal.")
    else
        print("The vectors are not orthogonal.")
    end if
end procedure

procedure check_orthogonality(n, byRef pairs)
    for i = 0 to n-1
        for j = i+1 to n-1
            v1 = pairs[i]
            v2 = pairs[j]
            var dot_product
            is_orthogonal(v1, v2, dot_product)
        end for
    end for
end procedure


////the modified version of the algorithm that uses a dot_product function instead of a procedure:

function dot_product(v1, v2)
    var ps = 0
    for i = 0 to v1.length - 1
        for j = 0 to v2.length - 1
            if i == j
                ps = ps + (v1[i] * v2[j])
            end if
        end for
    end for
    return ps
end function

function is_orthogonal(v1, v2)
    dot_product_result = dot_product(v1, v2)
    if dot_product_result == 0
        print("The vectors are orthogonal.")
    else
        print("The vectors are not orthogonal.")
    end if
end function

procedure check_orthogonality(n, byRef pairs)
    for i = 0 to n-1
        for j = i+1 to n-1
            v1 = pairs[i]
            v2 = pairs[j]
            is_orthogonal(v1, v2)
        end for
    end for
end procedure
